openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v1
servers:
  - url: http://localhost:8080
    description: api-gateway
paths:
  /api/signout:
    post:
      tags:
        - user-controller
      operationId: signout
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/register:
    post:
      tags:
        - user-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtResponse'
  /api/refresh:
    post:
      tags:
        - user-controller
      operationId: refresh
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtResponse'
  /api/auth:
    post:
      tags:
        - user-controller
      operationId: auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtResponse'
  /api/account:
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
        required: true
      responses:
        "200":
          description: OK
  /api/rooms/{roomId}:
    put:
      tags:
        - room-controller
      operationId: updateRoom
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Room'
    delete:
      tags:
        - room-controller
      operationId: deleteRoom
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  /api/homes/{homeId}:
    get:
      tags:
        - home-controller
      operationId: getHomeById
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: homeId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Home'
    put:
      tags:
        - home-controller
      operationId: updateHome
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: homeId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HomeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Home'
    delete:
      tags:
        - home-controller
      operationId: deleteHomeById
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: homeId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  /api/rooms:
    post:
      tags:
        - room-controller
      operationId: createRoom
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: homeId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Room'
  /api/homes:
    get:
      tags:
        - home-controller
      operationId: getHomes
      security:
        - JwtAuth: [ ]
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HomeSimple'
    post:
      tags:
        - home-controller
      operationId: createHome
      security:
        - JwtAuth: []
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HomeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Home'
  /serv/verify/home-owner:
    post:
      tags:
        - validation-controller
      operationId: verifyOwner
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidationStatus'
  /api/devices/{id}:
    get:
      tags:
        - device-controller
      operationId: getDevice
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags:
        - device-controller
      operationId: editDevice
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditDeviceRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - device-controller
      operationId: deleteDevice
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  /api/devices:
    get:
      tags:
        - device-controller
      operationId: getDevices
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: homeId
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: roomId
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceSimple'
    post:
      tags:
        - device-controller
      operationId: createDevice
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Device'
  /api/devices/{id}/control:
    post:
      tags:
        - device-controller
      operationId: sendCommand
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandRequest'
        required: true
      responses:
        "200":
          description: OK

components:
  schemas:
    AccessRequest:
      required:
        - accessToken
      type: object
      properties:
        accessToken:
          type: string
    UserRegisterRequest:
      required:
        - confirmPassword
        - name
        - password
        - username
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    JwtResponse:
      required:
        - accessToken
        - refreshToken
        - ttl
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        ttl:
          type: integer
          format: int64
    RefreshRequest:
      required:
        - accessToken
        - refreshToken
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    UserAuthRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    DeleteUserRequest:
      required:
        - password
      type: object
      properties:
        password:
          type: string
    RoomRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    Room:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    HomeRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        address:
          type: string
    Home:
      required:
        - id
        - name
        - rooms
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        address:
          type: string
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
    HomeSimple:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    EditDeviceRequest:
      required:
        - homeId
        - name
      type: object
      properties:
        name:
          type: string
        homeId:
          type: integer
          format: int32
        roomId:
          type: integer
          format: int32
    BrightnessCapability:
      required:
        - code
        - value
      type: object
      allOf:
        - $ref: '#/components/schemas/Capability'
        - type: object
          properties:
            value:
              type: integer
              format: int32
    Capability:
      required:
        - code
        - value
      type: object
      properties:
        code:
          enum:
            - SWITCH_LED
            - TEMPERATURE
            - BRIGHTNESS
            - COLOR
          discriminator:
            propertyName: code
        value:
          type: object
    ColorCapability:
      required:
        - code
        - value
      type: object
      allOf:
        - $ref: '#/components/schemas/Capability'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/ColorProperties'
    ColorProperties:
      required:
        - v
        - h
        - s
      properties:
        v:
          type: number
          format: double
        h:
          type: number
          format: double
        s:
          type: number
          format: double


    Device:
      required:
        - capabilities
        - category
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        category:
          type: string
          enum:
            - LIGHT
        capabilities:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Capability'
    SwitchLedCapability:
      required:
        - code
        - value
      type: object
      allOf:
        - $ref: '#/components/schemas/Capability'
        - type: object
          properties:
            value:
              type: boolean
    TemperatureCapability:
      required:
        - code
        - value
      type: object
      allOf:
        - $ref: '#/components/schemas/Capability'
        - type: object
          properties:
            value:
              type: integer
              format: int32
    CreateDeviceRequest:
      required:
        - homeId
        - tuyaDeviceId
      type: object
      properties:
        tuyaDeviceId:
          type: string
        name:
          type: string
        homeId:
          type: integer
          format: int32
        roomId:
          type: integer
          format: int32
    CommandRequest:
      required:
        - commands
      properties:
        commands:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Capability'
    DeviceSimple:
      required:
        - category
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        category:
          type: string
          enum:
            - LIGHT
    ValidateRequest:
      required:
        - homeId
      type: object
      properties:
        homeId:
          type: integer
          format: int32
        roomId:
          type: integer
          format: int32
    ValidationStatus:
      required:
        - verified
      type: object
      properties:
        verified:
          type: boolean
